// <auto-generated />
using System;
using LuckyDraw.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LuckyDraw.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241120015219_CreateInitialMigration")]
    partial class CreateInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LuckyDraw.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0e0a5a69-8c2a-4a44-ae2e-c9e5bba3a947",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc1b98fc-6e6f-4ebf-96fa-5c72b63d9af3",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "MAIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzA4F7yDvAljB5wx8TaKhGTxW1dEUH/feK2S5IT1sDmKTkhnkx0CuyivKl+1kPmoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1b2308e-9a4d-4b1f-b671-d16f44e96b8d",
                            TwoFactorEnabled = false,
                            UserName = "main"
                        },
                        new
                        {
                            Id = "1f4e20e2-5c0e-4c79-a5c9-28b0f4a8b1dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c6a2e3b-1b7d-46a3-9f7e-60a5b0c29bcd",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "VIEW",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzA4F7yDvAljB5wx8TaKhGTxW1dEUH/feK2S5IT1sDmKTkhnkx0CuyivKl+1kPmoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f64e5b1f-7a30-4f5a-91bb-1f3e6388a948",
                            TwoFactorEnabled = false,
                            UserName = "view"
                        },
                        new
                        {
                            Id = "2d3c56d8-6b6a-4c1e-a29e-5d3b0c6a8d2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f28d1b6-7a31-4ecb-9a92-604bafca76b7",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ACTION",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzA4F7yDvAljB5wx8TaKhGTxW1dEUH/feK2S5IT1sDmKTkhnkx0CuyivKl+1kPmoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67d7a8b5-0c6d-4638-bb3e-1c726c8cba53",
                            TwoFactorEnabled = false,
                            UserName = "action"
                        },
                        new
                        {
                            Id = "3e3b28fa-3c2a-4b49-b7b2-a8c3b4e6e92d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d98c1e5-5b30-4df7-8a81-1b62a7bc5d1d",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "RESULT",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzA4F7yDvAljB5wx8TaKhGTxW1dEUH/feK2S5IT1sDmKTkhnkx0CuyivKl+1kPmoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be1f6b3d-6c0d-472a-a9d6-2f3a5b8c7d0b",
                            TwoFactorEnabled = false,
                            UserName = "result"
                        });
                });

            modelBuilder.Entity("LuckyDraw.Domain.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("LuckyDraw.Domain.Prize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Prize");
                });

            modelBuilder.Entity("LuckyDraw.Domain.Winner", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("PrizeId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId");

                    b.HasIndex("PrizeId");

                    b.ToTable("Winner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "19790536-5348-4397-857f-ba8dc02fa52e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0e0a5a69-8c2a-4a44-ae2e-c9e5bba3a947",
                            RoleId = "19790536-5348-4397-857f-ba8dc02fa52e"
                        },
                        new
                        {
                            UserId = "1f4e20e2-5c0e-4c79-a5c9-28b0f4a8b1dd",
                            RoleId = "19790536-5348-4397-857f-ba8dc02fa52e"
                        },
                        new
                        {
                            UserId = "2d3c56d8-6b6a-4c1e-a29e-5d3b0c6a8d2c",
                            RoleId = "19790536-5348-4397-857f-ba8dc02fa52e"
                        },
                        new
                        {
                            UserId = "3e3b28fa-3c2a-4b49-b7b2-a8c3b4e6e92d",
                            RoleId = "19790536-5348-4397-857f-ba8dc02fa52e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("LuckyDraw.Domain.Winner", b =>
                {
                    b.HasOne("LuckyDraw.Domain.Participant", "Participant")
                        .WithMany("Winners")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LuckyDraw.Domain.Prize", "Prize")
                        .WithMany("Winners")
                        .HasForeignKey("PrizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LuckyDraw.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LuckyDraw.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LuckyDraw.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LuckyDraw.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LuckyDraw.Domain.Participant", b =>
                {
                    b.Navigation("Winners");
                });

            modelBuilder.Entity("LuckyDraw.Domain.Prize", b =>
                {
                    b.Navigation("Winners");
                });
#pragma warning restore 612, 618
        }
    }
}
