@page "/"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LuckyDraw.Data

@inject IdentityRedirectManager RedirectManager
@inject ILogger<Login> Logger
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Enter Lobby</PageTitle>

<div class ="col-md-4 p-4 border-1 border-primary">


</div>
<div class="col-md-4 p-4 border border-1 rounded bg-white shadow mb-5 ">
    <div class="row" style="width: 100%;">
        <h2 class="col-md-12">Enter Lobby</h2>
    </div>
    <div class="row" style="width: 100%;">
        <div class="col-md-12">
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.Name" class="form-control" autocomplete="username" aria-required="true" placeholder="username">
                        <option value="" disabled>-- Select Users --</option>
                        @foreach (var user in users)
                        {
                            <option value="@user.UserName">@user.NormalizedUserName</option>
                        }
                    </InputSelect>
                    <label for="portallanguage" class="form-label">Name</label>
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" style="width: 100%;" class="rz-button rz-button-md">Join</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    private List<ApplicationUser> users = [];

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        users = UserManager.Users.AsQueryable().ToList();
        if (HttpMethods.IsGet(HttpContext.Request.Method))
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Name, Input.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            var redirectUrl = ReturnUrl ?? $"{Input.Name}/index";
            RedirectManager.RedirectTo(redirectUrl);
        }
        else
            errorMessage = "Error: Invalid login attempt.";
    }  

    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
